/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gameboard;

import javax.swing.JOptionPane;
import java.io.*;
import java.util.Date;

/**
 *
 * @author KCISCisco
 * 
 * // Note: To save the possible frustration of looking at all the algorithms each button has, they are almost
 * // completely identical to each other with the only difference being a String character being stored in a different element
 * // in the c array
 */


public class gameJFrame extends javax.swing.JFrame {

    // This method will clear the gameboard array and clear the counters
    public void clear() {
        // Clearing the GUI
        firstBox.setText("");
        secondBox.setText("");
        thirdBox.setText("");
        fourthBox.setText("");
        fifthBox.setText("");
        sixthBox.setText("");
        seventhBox.setText("");
        eighthBox.setText("");
        ninthBox.setText("");
        
        // Setting the counter depending on who won the last round
        if (oWin) {
            counter = 1;    // When counter is 1, "O" makes the first move
        }
        
        else if (!oWin) {
            counter = 0;    // When the counter is 0, "X" makes the first move
        }
            
        // Reset the array for a new game to compare a new set of buttons
        for (int row = 0; row < 3; row++) {
            for (int col = 0; col < 3; col++) {
                c[row][col] = "";
            }
        }
        
    }
    /**
     * Creates new form gameJFrame
     */
        String name1;                                                   // Holds the name of player one
        String name2;                                                   // Holds the name of player two
        Player p1;                                                      // Creating a player one object        
        Player p2;                                                      // Creating a player two object
        String[][] c = { {"", "", ""}, {"", "", ""},{"", "", ""} };     // Acts as a game board in code
        int counter = 0;                                                // Move counter
        int tieCounter = 0;                                             // Number of ties between between the two players
        String tempCounter;                                             // Temp varible will hold the counters when switching players
        int tempNumber;                                                 // Hold the int casted from tempCounter variable from above                                                 
        String tempPlayer;                                              // Hold the name of a player when switching sides
        GameBoard g = new GameBoard();                                  // Creating a new gameBoard object
        boolean oWin = false;                                           // Boolean works like a switch in determining who moves first 
                                                                        // Depending on the previous rounds winner
        FileWriter fw;                                                  // FileWriter to append to the game history file
        PrintWriter pw;                                                 // PrintWriter to write to game history file
    public gameJFrame() {
        initComponents();
        name1 = (String)JOptionPane.showInputDialog(this, "Hello! Enter your name player 1!" );
        name2 = (String)JOptionPane.showInputDialog(this, "Enter your name player 2!");
        p1 = new Player(name1, 0);
        p2 = new Player(name2, 0);
        firstLabel.setText(p1.getName() + ":");
        secondLabel.setText(p2.getName() + ":");
        firstScoreLabel.setText("" + p1.getScore());
        secondScoreLabel.setText("" + p2.getScore());
        tieScoreLabel.setText("" + tieCounter);
       
        }
        
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        firstBox = new javax.swing.JButton();
        secondBox = new javax.swing.JButton();
        thirdBox = new javax.swing.JButton();
        fourthBox = new javax.swing.JButton();
        fifthBox = new javax.swing.JButton();
        sixthBox = new javax.swing.JButton();
        seventhBox = new javax.swing.JButton();
        eighthBox = new javax.swing.JButton();
        ninthBox = new javax.swing.JButton();
        firstLabel = new javax.swing.JLabel();
        firstScoreLabel = new javax.swing.JLabel();
        secondLabel = new javax.swing.JLabel();
        secondScoreLabel = new javax.swing.JLabel();
        tieLabel = new javax.swing.JLabel();
        tieScoreLabel = new javax.swing.JLabel();
        exitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Tic-Tac-Toe");

        firstBox.setFont(new java.awt.Font("Kristen ITC", 3, 36)); // NOI18N
        firstBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                firstBoxMouseClicked(evt);
            }
        });

        secondBox.setFont(new java.awt.Font("Kristen ITC", 3, 36)); // NOI18N
        secondBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                secondBoxMouseClicked(evt);
            }
        });

        thirdBox.setFont(new java.awt.Font("Kristen ITC", 3, 36)); // NOI18N
        thirdBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                thirdBoxMouseClicked(evt);
            }
        });

        fourthBox.setFont(new java.awt.Font("Kristen ITC", 3, 36)); // NOI18N
        fourthBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fourthBoxMouseClicked(evt);
            }
        });

        fifthBox.setFont(new java.awt.Font("Kristen ITC", 3, 36)); // NOI18N
        fifthBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fifthBoxMouseClicked(evt);
            }
        });

        sixthBox.setFont(new java.awt.Font("Kristen ITC", 3, 36)); // NOI18N
        sixthBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sixthBoxMouseClicked(evt);
            }
        });

        seventhBox.setFont(new java.awt.Font("Kristen ITC", 3, 36)); // NOI18N
        seventhBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                seventhBoxMouseClicked(evt);
            }
        });

        eighthBox.setFont(new java.awt.Font("Kristen ITC", 3, 36)); // NOI18N
        eighthBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                eighthBoxMouseClicked(evt);
            }
        });

        ninthBox.setFont(new java.awt.Font("Kristen ITC", 3, 36)); // NOI18N
        ninthBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ninthBoxMouseClicked(evt);
            }
        });

        firstLabel.setText("label1");

        firstScoreLabel.setText("jLabel3");

        secondLabel.setText("jLabel4");

        secondScoreLabel.setText("jLabel5");

        tieLabel.setText("Ties:");

        tieScoreLabel.setText("jLabel7");

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(128, 128, 128)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(fourthBox, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(fifthBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(firstBox, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(secondBox, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(seventhBox, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(eighthBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(firstLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(firstScoreLabel)
                                .addGap(18, 18, 18)
                                .addComponent(secondLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(secondScoreLabel)
                                .addGap(4, 4, 4)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(thirdBox, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                                    .addComponent(sixthBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ninthBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(tieLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tieScoreLabel)))))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(firstBox, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                    .addComponent(secondBox, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                    .addComponent(thirdBox, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(fourthBox, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                    .addComponent(fifthBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sixthBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(seventhBox, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                    .addComponent(eighthBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ninthBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(exitButton)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstLabel)
                    .addComponent(firstScoreLabel)
                    .addComponent(secondLabel)
                    .addComponent(secondScoreLabel)
                    .addComponent(tieLabel)
                    .addComponent(tieScoreLabel))
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void firstBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_firstBoxMouseClicked
        // If the counter is even then it is X's turn
        if (counter % 2 == 0) {
            // Check if the box is empty
            if (firstBox.getText().equals("")){
                // Display the move to the user
                firstBox.setText("X");
                // Store the value into the array for later checking for a win
                c[0][0] = "X";
                // Increment the move counter
                counter++;
            }
            // Check if X has made a winning move
            if (g.checkWinX(c)) {
                JOptionPane.showMessageDialog(this, name1 + " has won the round!", "Winner!", JOptionPane.PLAIN_MESSAGE);
                // Increment the score if X wins
                p1.addPoint();
                // Display the incremented score to the user
                firstScoreLabel.setText("" + p1.getScore());
                // Set the previous round winner to player 1
                oWin = false;
                // Clear the gameboard
                clear();
            }
        }
        // If the counter is odd then it is O's turn
        if (counter % 2 == 1) {
            // Check if that box is empty
            if (firstBox.getText().equals("")){
                // Display move to the user
                firstBox.setText("O");
                // Store the value into the array for later checking for a win
                c[0][0] = "O";
                // Increment the move counter
                counter++;
            }
            // Check if O has made a winning move
            if (g.checkWinO(c)) {
                JOptionPane.showMessageDialog(this,  name2 + " has won this round!", "Winner!", JOptionPane.PLAIN_MESSAGE);
                // Increment the score if O wins
                p2.addPoint();    
                // Display the incremented score to the user
                secondScoreLabel.setText("" + p2.getScore());
                // Set the previous round winner to player 2
                oWin = true;
                // Clear the gameBoard
                clear();
            }    
        }
        // Check for a tie
        if (!oWin) {
            if (g.checkForTieX(counter)) {
                JOptionPane.showMessageDialog(this, "No one won this round!", "Tie", JOptionPane.PLAIN_MESSAGE);
                // Increment the tie counter
                tieCounter++;
                // Display the incremented score for the user
                tieScoreLabel.setText("" + tieCounter);
                // Clear the gameboard
                clear();
            }
        }
        else if (oWin) {
            if (g.checkForTieO(counter)) {               
                JOptionPane.showMessageDialog(this, "No one won this round!", "Tie", JOptionPane.PLAIN_MESSAGE);
                // Increment the tie counter
                tieCounter++;
                // Display the incremented score for the user
                tieScoreLabel.setText("" + tieCounter);
                // Clear the gameboard
                clear();
            }
        }
    }//GEN-LAST:event_firstBoxMouseClicked

    private void secondBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_secondBoxMouseClicked
       // If the counter is even then it is X's turn
        if (counter % 2 == 0) {
            // Check if the box is empty
            if (secondBox.getText().equals("")){
                // Display the move to the user
                secondBox.setText("X");
                // Store the value into the array for later checking for a win
                c[0][1] = "X";
                // Increment the move counter
                counter++;
            }
            // Check if X has made a winning move
            if (g.checkWinX(c)) {
                JOptionPane.showMessageDialog(this, name1 + " has won the round!", "Winner!", JOptionPane.PLAIN_MESSAGE);
                // Increment the score if X wins
                p1.addPoint();
                // Display the incremented score to the user
                firstScoreLabel.setText("" + p1.getScore());
                // Set the previous round winner to player 1
                oWin = false;
                // Clear the gameboard
                clear();
            }
        }
        // If the counter is odd then it is O's turn
        if (counter % 2 == 1) {
            // Check if that box is empty
            if (secondBox.getText().equals("")){
                // Display move to the user
                secondBox.setText("O");
                // Store the value into the array for later checking for a win
                c[0][1] = "O";
                // Increment the move counter
                counter++;
            }
            // Check if O has made a winning move
            if (g.checkWinO(c)) {
                JOptionPane.showMessageDialog(this,  name2 + " has won this round!", "Winner!", JOptionPane.PLAIN_MESSAGE);
                // Increment the score if O wins
                p2.addPoint();    
                // Display the incremented score to the user
                secondScoreLabel.setText("" + p2.getScore());
                // Set the previous round winner to player 2
                oWin = true;
                // Clear the gameBoard
                clear();
            }    
        }
        // Check for a tie
        if (!oWin) {
            if (g.checkForTieX(counter)) {
                JOptionPane.showMessageDialog(this, "No one won this round!", "Tie", JOptionPane.PLAIN_MESSAGE);
                // Increment the tie counter
                tieCounter++;
                // Display the incremented score for the user
                tieScoreLabel.setText("" + tieCounter);
                // Clear the gameboard
                clear();
            }
        }
        else if (oWin) {
            if (g.checkForTieO(counter)) {               
                JOptionPane.showMessageDialog(this, "No one won this round!", "Tie", JOptionPane.PLAIN_MESSAGE);
                // Increment the tie counter
                tieCounter++;
                // Display the incremented score for the user
                tieScoreLabel.setText("" + tieCounter);
                // Clear the gameboard
                clear();
            }
        }
    }//GEN-LAST:event_secondBoxMouseClicked

    private void thirdBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_thirdBoxMouseClicked
        // If the counter is even then it is X's turn
        if (counter % 2 == 0) {
            // Check if the box is empty
            if (thirdBox.getText().equals("")){
                // Display the move to the user
                thirdBox.setText("X");
                // Store the value into the array for later checking for a win
                c[0][2] = "X";
                // Increment the move counter
                counter++;
            }
            // Check if X has made a winning move
            if (g.checkWinX(c)) {
                JOptionPane.showMessageDialog(this, name1 + " has won the round!", "Winner!", JOptionPane.PLAIN_MESSAGE);
                // Increment the score if X wins
                p1.addPoint();
                // Display the incremented score to the user
                firstScoreLabel.setText("" + p1.getScore());
                // Set the previous round winner to player 1
                oWin = false;
                // Clear the gameboard
                clear();
            }
        }
        // If the counter is odd then it is O's turn
        if (counter % 2 == 1) {
            // Check if that box is empty
            if (thirdBox.getText().equals("")){
                // Display move to the user
                thirdBox.setText("O");
                // Store the value into the array for later checking for a win
                c[0][2] = "O";
                // Increment the move counter
                counter++;
            }
            // Check if O has made a winning move
            if (g.checkWinO(c)) {
                JOptionPane.showMessageDialog(this,  name2 + " has won this round!", "Winner!", JOptionPane.PLAIN_MESSAGE);
                // Increment the score if O wins
                p2.addPoint();    
                // Display the incremented score to the user
                secondScoreLabel.setText("" + p2.getScore());
                // Set the previous round winner to player 2
                oWin = true;
                // Clear the gameBoard
                clear();
            }    
        }
       // Check for a tie
        if (!oWin) {
            if (g.checkForTieX(counter)) {
                JOptionPane.showMessageDialog(this, "No one won this round!", "Tie", JOptionPane.PLAIN_MESSAGE);
                // Increment the tie counter
                tieCounter++;
                // Display the incremented score for the user
                tieScoreLabel.setText("" + tieCounter);
                // Clear the gameboard
                clear();
            }
        }
        else if (oWin) {
            if (g.checkForTieO(counter)) {               
                JOptionPane.showMessageDialog(this, "No one won this round!", "Tie", JOptionPane.PLAIN_MESSAGE);
                // Increment the tie counter
                tieCounter++;
                // Display the incremented score for the user
                tieScoreLabel.setText("" + tieCounter);
                // Clear the gameboard
                clear();
            }
        }
    }//GEN-LAST:event_thirdBoxMouseClicked

    private void fourthBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fourthBoxMouseClicked
        // If the counter is even then it is X's turn
        if (counter % 2 == 0) {
            // Check if the box is empty
            if (fourthBox.getText().equals("")){
                // Display the move to the user
                fourthBox.setText("X");
                // Store the value into the array for later checking for a win
                c[1][0] = "X";
                // Increment the move counter
                counter++;
            }
            // Check if X has made a winning move
            if (g.checkWinX(c)) {
                JOptionPane.showMessageDialog(this, name1 + " has won the round!", "Winner!", JOptionPane.PLAIN_MESSAGE);
                // Increment the score if X wins
                p1.addPoint();
                // Display the incremented score to the user
                firstScoreLabel.setText("" + p1.getScore());
                // Set the previous round winner to player 1
                oWin = false;
                // Clear the gameboard
                clear();
            }
        }
        // If the counter is odd then it is O's turn
        if (counter % 2 == 1) {
            // Check if that box is empty
            if (fourthBox.getText().equals("")){
                // Display move to the user
                fourthBox.setText("O");
                // Store the value into the array for later checking for a win
                c[1][0] = "O";
                // Increment the move counter
                counter++;
            }
            // Check if O has made a winning move
            if (g.checkWinO(c)) {
                JOptionPane.showMessageDialog(this,  name2 + " has won this round!", "Winner!", JOptionPane.PLAIN_MESSAGE);
                // Increment the score if O wins
                p2.addPoint();    
                // Display the incremented score to the user
                secondScoreLabel.setText("" + p2.getScore());
                // Set the previous round winner to player 2
                oWin = true;
                // Clear the gameBoard
                clear();
            }    
        }
        // Check for a tie
        if (!oWin) {
            if (g.checkForTieX(counter)) {
                JOptionPane.showMessageDialog(this, "No one won this round!", "Tie", JOptionPane.PLAIN_MESSAGE);
                // Increment the tie counter
                tieCounter++;
                // Display the incremented score for the user
                tieScoreLabel.setText("" + tieCounter);
                // Clear the gameboard
                clear();
            }
        }
        else if (oWin) {
            if (g.checkForTieO(counter)) {               
                JOptionPane.showMessageDialog(this, "No one won this round!", "Tie", JOptionPane.PLAIN_MESSAGE);
                // Increment the tie counter
                tieCounter++;
                // Display the incremented score for the user
                tieScoreLabel.setText("" + tieCounter);
                // Clear the gameboard
                clear();
            }
        }
    }//GEN-LAST:event_fourthBoxMouseClicked

    private void fifthBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fifthBoxMouseClicked
        // If the counter is even then it is X's turn
        if (counter % 2 == 0) {
            // Check if the box is empty
            if (fifthBox.getText().equals("")){
                // Display the move to the user
                fifthBox.setText("X");
                // Store the value into the array for later checking for a win
                c[1][1] = "X";
                // Increment the move counter
                counter++;
            }
            // Check if X has made a winning move
            if (g.checkWinX(c)) {
                JOptionPane.showMessageDialog(this, name1 + " has won the round!", "Winner!", JOptionPane.PLAIN_MESSAGE);
                // Increment the score if X wins
                p1.addPoint();
                // Display the incremented score to the user
                firstScoreLabel.setText("" + p1.getScore());
                // Set the previous round winner to player 1
                oWin = false;
                // Clear the gameboard
                clear();
            }
        }
        // If the counter is odd then it is O's turn
        if (counter % 2 == 1) {
            // Check if that box is empty
            if (fifthBox.getText().equals("")){
                // Display move to the user
                fifthBox.setText("O");
                // Store the value into the array for later checking for a win
                c[1][1] = "O";
                // Increment the move counter
                counter++;
            }
            // Check if O has made a winning move
            if (g.checkWinO(c)) {
                JOptionPane.showMessageDialog(this,  name2 + " has won this round!", "Winner!", JOptionPane.PLAIN_MESSAGE);
                // Increment the score if O wins
                p2.addPoint();    
                // Display the incremented score to the user
                secondScoreLabel.setText("" + p2.getScore());
                // Set the previous round winner to player 2
                oWin = true;
                // Clear the gameBoard
                clear();
            }    
        }
        // Check for a tie
        if (!oWin) {
            if (g.checkForTieX(counter)) {
                JOptionPane.showMessageDialog(this, "No one won this round!", "Tie", JOptionPane.PLAIN_MESSAGE);
                // Increment the tie counter
                tieCounter++;
                // Display the incremented score for the user
                tieScoreLabel.setText("" + tieCounter);
                // Clear the gameboard
                clear();
            }
        }
        else if (oWin) {
            if (g.checkForTieO(counter)) {               
                JOptionPane.showMessageDialog(this, "No one won this round!", "Tie", JOptionPane.PLAIN_MESSAGE);
                // Increment the tie counter
                tieCounter++;
                // Display the incremented score for the user
                tieScoreLabel.setText("" + tieCounter);
                // Clear the gameboard
                clear();
            }
        }
    }//GEN-LAST:event_fifthBoxMouseClicked

    private void sixthBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sixthBoxMouseClicked
       // If the counter is even then it is X's turn
        if (counter % 2 == 0) {
            // Check if the box is empty
            if (sixthBox.getText().equals("")){
                // Display the move to the user
                sixthBox.setText("X");
                // Store the value into the array for later checking for a win
                c[1][2] = "X";
                // Increment the move counter
                counter++;
            }
            // Check if X has made a winning move
            if (g.checkWinX(c)) {
                JOptionPane.showMessageDialog(this, name1 + " has won the round!", "Winner!", JOptionPane.PLAIN_MESSAGE);
                // Increment the score if X wins
                p1.addPoint();
                // Display the incremented score to the user
                firstScoreLabel.setText("" + p1.getScore());
                // Set the previous round winner to player 1
                oWin = false;
                // Clear the gameboard
                clear();
            }
        }
        // If the counter is odd then it is O's turn
        if (counter % 2 == 1) {
            // Check if that box is empty
            if (sixthBox.getText().equals("")){
                // Display move to the user
                sixthBox.setText("O");
                // Store the value into the array for later checking for a win
                c[1][2] = "O";
                // Increment the move counter
                counter++;
            }
            // Check if O has made a winning move
            if (g.checkWinO(c)) {
                JOptionPane.showMessageDialog(this,  name2 + " has won this round!", "Winner!", JOptionPane.PLAIN_MESSAGE);
                // Increment the score if O wins
                p2.addPoint();    
                // Display the incremented score to the user
                secondScoreLabel.setText("" + p2.getScore());
                // Set the previous round winner to player 2
                oWin = true;
                // Clear the gameBoard
                clear();
            }    
        }
        // Check for a tie
        if (!oWin) {
            if (g.checkForTieX(counter)) {
                JOptionPane.showMessageDialog(this, "No one won this round!", "Tie", JOptionPane.PLAIN_MESSAGE);
                // Increment the tie counter
                tieCounter++;
                // Display the incremented score for the user
                tieScoreLabel.setText("" + tieCounter);
                // Clear the gameboard
                clear();
            }
        }
        else if (oWin) {
            if (g.checkForTieO(counter)) {               
                JOptionPane.showMessageDialog(this, "No one won this round!", "Tie", JOptionPane.PLAIN_MESSAGE);
                // Increment the tie counter
                tieCounter++;
                // Display the incremented score for the user
                tieScoreLabel.setText("" + tieCounter);
                // Clear the gameboard
                clear();
            }
        }
    }//GEN-LAST:event_sixthBoxMouseClicked

    private void seventhBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_seventhBoxMouseClicked
        // If the counter is even then it is X's turn
        if (counter % 2 == 0) {
            // Check if the box is empty
            if (seventhBox.getText().equals("")){
                // Display the move to the user
                seventhBox.setText("X");
                // Store the value into the array for later checking for a win
                c[2][0] = "X";
                // Increment the move counter
                counter++;
            }
            // Check if X has made a winning move
            if (g.checkWinX(c)) {
                JOptionPane.showMessageDialog(this, name1 + " has won the round!", "Winner!", JOptionPane.PLAIN_MESSAGE);
                // Increment the score if X wins
                p1.addPoint();
                // Display the incremented score to the user
                firstScoreLabel.setText("" + p1.getScore());
                // Set the previous round winner to player 1
                oWin = false;
                // Clear the gameboard
                clear();
            }
        }
        // If the counter is odd then it is O's turn
        if (counter % 2 == 1) {
            // Check if that box is empty
            if (seventhBox.getText().equals("")){
                // Display move to the user
                seventhBox.setText("O");
                // Store the value into the array for later checking for a win
                c[2][0] = "O";
                // Increment the move counter
                counter++;
            }
            // Check if O has made a winning move
            if (g.checkWinO(c)) {
                JOptionPane.showMessageDialog(this,  name2 + " has won this round!", "Winner!", JOptionPane.PLAIN_MESSAGE);
                // Increment the score if O wins
                p2.addPoint();    
                // Display the incremented score to the user
                secondScoreLabel.setText("" + p2.getScore());
                // Set the previous round winner to player 2
                oWin = true;
                // Clear the gameBoard
                clear();
            }    
        }
        // Check for a tie
        if (!oWin) {
            if (g.checkForTieX(counter)) {
                JOptionPane.showMessageDialog(this, "No one won this round!", "Tie", JOptionPane.PLAIN_MESSAGE);
                // Increment the tie counter
                tieCounter++;
                // Display the incremented score for the user
                tieScoreLabel.setText("" + tieCounter);
                // Clear the gameboard
                clear();
            }
        }
        else if (oWin) {
            if (g.checkForTieO(counter)) {               
                JOptionPane.showMessageDialog(this, "No one won this round!", "Tie", JOptionPane.PLAIN_MESSAGE);
                // Increment the tie counter
                tieCounter++;
                // Display the incremented score for the user
                tieScoreLabel.setText("" + tieCounter);
                // Clear the gameboard
                clear();
            }
        }
    }//GEN-LAST:event_seventhBoxMouseClicked

    private void eighthBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eighthBoxMouseClicked
        // If the counter is even then it is X's turn
        if (counter % 2 == 0) {
            // Check if the box is empty
            if (eighthBox.getText().equals("")){
                // Display the move to the user
                eighthBox.setText("X");
                // Store the value into the array for later checking for a win
                c[2][1] = "X";
                // Increment the move counter
                counter++;
            }
            // Check if X has made a winning move
            if (g.checkWinX(c)) {
                JOptionPane.showMessageDialog(this, name1 + " has won the round!", "Winner!", JOptionPane.PLAIN_MESSAGE);
                // Increment the score if X wins
                p1.addPoint();
                // Display the incremented score to the user
                firstScoreLabel.setText("" + p1.getScore());
                // Set the previous round winner to player 1
                oWin = false;
                // Clear the gameboard
                clear();
            }
        }
        // If the counter is odd then it is O's turn
        if (counter % 2 == 1) {
            // Check if that box is empty
            if (eighthBox.getText().equals("")){
                // Display move to the user
                eighthBox.setText("O");
                // Store the value into the array for later checking for a win
                c[2][1] = "O";
                // Increment the move counter
                counter++;
            }
            // Check if O has made a winning move
            if (g.checkWinO(c)) {
                JOptionPane.showMessageDialog(this,  name2 + " has won this round!", "Winner!", JOptionPane.PLAIN_MESSAGE);
                // Increment the score if O wins
                p2.addPoint();    
                // Display the incremented score to the user
                secondScoreLabel.setText("" + p2.getScore());
                // Set the previous round winner to player 2
                oWin = true;
                // Clear the gameBoard
                clear();
            }    
        }
        // Check for a tie
        if (!oWin) {
            if (g.checkForTieX(counter)) {
                JOptionPane.showMessageDialog(this, "No one won this round!", "Tie", JOptionPane.PLAIN_MESSAGE);
                // Increment the tie counter
                tieCounter++;
                // Display the incremented score for the user
                tieScoreLabel.setText("" + tieCounter);
                // Clear the gameboard
                clear();
            }
        }
        else if (oWin) {
            if (g.checkForTieO(counter)) {               
                JOptionPane.showMessageDialog(this, "No one won this round!", "Tie", JOptionPane.PLAIN_MESSAGE);
                // Increment the tie counter
                tieCounter++;
                // Display the incremented score for the user
                tieScoreLabel.setText("" + tieCounter);
                // Clear the gameboard
                clear();
            }
        }
    }//GEN-LAST:event_eighthBoxMouseClicked

    private void ninthBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ninthBoxMouseClicked
        // If the counter is even then it is X's turn
        if (counter % 2 == 0) {
            // Check if the box is empty
            if (ninthBox.getText().equals("")){
                // Display the move to the user
                ninthBox.setText("X");
                // Store the value into the array for later checking for a win
                c[2][2] = "X";
                // Increment the move counter
                counter++;
            }
            // Check if X has made a winning move
            if (g.checkWinX(c)) {
                JOptionPane.showMessageDialog(this, name1 + " has won the round!", "Winner!", JOptionPane.PLAIN_MESSAGE);
                // Increment the score if X wins
                p1.addPoint();
                // Display the incremented score to the user
                firstScoreLabel.setText("" + p1.getScore());
                // Set the previous round winner to player 1
                oWin = false;
                // Clear the gameboard
                clear();
            }
        }
        // If the counter is odd then it is O's turn
        if (counter % 2 == 1) {
            // Check if that box is empty
            if (ninthBox.getText().equals("")){
                // Display move to the user
                ninthBox.setText("O");
                // Store the value into the array for later checking for a win
                c[2][2] = "O";
                // Increment the move counter
                counter++;
            }
            // Check if O has made a winning move
            if (g.checkWinO(c)) {
                JOptionPane.showMessageDialog(this,  name2 + " has won this round!", "Winner!", JOptionPane.PLAIN_MESSAGE);
                // Increment the score if O wins
                p2.addPoint();    
                // Display the incremented score to the user
                secondScoreLabel.setText("" + p2.getScore());
                // Set the previous round winner to player 2
                oWin = true;
                // Clear the gameBoard
                clear();
            }    
        }
        // Check for a tie
        if (!oWin) {
            if (g.checkForTieX(counter)) {
                JOptionPane.showMessageDialog(this, "No one won this round!", "Tie", JOptionPane.PLAIN_MESSAGE);
                // Increment the tie counter
                tieCounter++;
                // Display the incremented score for the user
                tieScoreLabel.setText("" + tieCounter);
                // Clear the gameboard
                clear();
            }
        }
        else if (oWin) {
            if (g.checkForTieO(counter)) {               
                JOptionPane.showMessageDialog(this, "No one won this round!", "Tie", JOptionPane.PLAIN_MESSAGE);
                // Increment the tie counter
                tieCounter++;
                // Display the incremented score for the user
                tieScoreLabel.setText("" + tieCounter);
                // Clear the gameboard
                clear();
            }
        }
    }//GEN-LAST:event_ninthBoxMouseClicked

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        String score = "Scores.txt";    // Name of the game history file
        Date date = new Date();         // Making a Date object
      
        // Catch the error (if there will be one)
        try {
        fw = new FileWriter(score, true);
        pw = new PrintWriter(fw);
        }
        catch (Exception e){
            // Do nothing
        }
        
        // Print the game statistics
        pw.println(date.toString() + " => " + p1.getName() + " VS " + p2.getName() 
                + ": " + p1.getScore() + " - " + p2.getScore());
        // Close the file
        pw.close();
        
        JOptionPane.showMessageDialog(this, "If you want proof of this game look for a file named 'scores.txt'\nfor "
                + "bragging rights! Thank you for playing!");
        
        // End the program
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(gameJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(gameJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(gameJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(gameJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new gameJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton eighthBox;
    private javax.swing.JButton exitButton;
    private javax.swing.JButton fifthBox;
    private javax.swing.JButton firstBox;
    private javax.swing.JLabel firstLabel;
    private javax.swing.JLabel firstScoreLabel;
    private javax.swing.JButton fourthBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton ninthBox;
    private javax.swing.JButton secondBox;
    private javax.swing.JLabel secondLabel;
    private javax.swing.JLabel secondScoreLabel;
    private javax.swing.JButton seventhBox;
    private javax.swing.JButton sixthBox;
    private javax.swing.JButton thirdBox;
    private javax.swing.JLabel tieLabel;
    private javax.swing.JLabel tieScoreLabel;
    // End of variables declaration//GEN-END:variables
}
